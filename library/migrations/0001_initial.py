# Generated by Django 5.2.1 on 2025-08-28 20:02

import django.core.validators
import django.db.models.deletion
import django.db.models.manager
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='Actor',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=50)),
            ],
        ),
        migrations.CreateModel(
            name='Author',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('first_name', models.CharField(max_length=100, verbose_name='First name')),
                ('last_name', models.CharField(max_length=100, verbose_name='Last name')),
                ('date_of_birth', models.DateField(blank=True, null=True, verbose_name='Date of birth')),
                ('profile', models.URLField(blank=True, null=True, verbose_name='Profile URL')),
                ('is_deleted', models.BooleanField(default=False, help_text='When the Author is deleted it is set to False.', verbose_name='Is deleted')),
                ('rating', models.IntegerField(blank=True, null=True, validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(10)], verbose_name='Rating in library.')),
            ],
        ),
        migrations.CreateModel(
            name='Category',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=30, unique=True, verbose_name='Category Title')),
            ],
            options={
                'verbose_name_plural': 'Categories',
            },
        ),
        migrations.CreateModel(
            name='Director',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=50)),
                ('experience', models.IntegerField(default=0)),
            ],
        ),
        migrations.CreateModel(
            name='Genre',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(blank=True, choices=[('Fiction', 'Fiction'), ('Non Fiction', 'Non-Fiction'), ('Sci-Fy', 'Science Fiction'), ('Fantasy', 'Fantasy'), ('Mystery', 'Mystery'), ('Bibliography', 'Bibliography'), ('Default', 'not_set')], max_length=100, unique=True, verbose_name='Genre')),
            ],
            options={
                'permissions': [('can_get_statistic', 'Can get statistic')],
            },
        ),
        migrations.CreateModel(
            name='Library',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=100, verbose_name='Library Title')),
                ('location', models.CharField(blank=True, max_length=100, null=True, verbose_name='Location of the Library')),
                ('website', models.URLField(blank=True, null=True, verbose_name='Website URL')),
            ],
            options={
                'verbose_name_plural': 'Libraries',
            },
        ),
        migrations.CreateModel(
            name='Publisher',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100, verbose_name='Name')),
                ('slug', models.SlugField(blank=True, default='publisher', null=True)),
                ('established_date', models.DateField()),
            ],
        ),
        migrations.CreateModel(
            name='SimpleBook',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=255, verbose_name='title')),
                ('author', models.CharField(max_length=255, verbose_name='author')),
                ('publication_year', models.PositiveIntegerField()),
            ],
        ),
        migrations.CreateModel(
            name='SoftDeleteManager',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
            ],
        ),
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('first_name', models.CharField(blank=True, max_length=50, null=True, verbose_name='First/Given name')),
                ('last_name', models.CharField(blank=True, max_length=70, null=True, verbose_name='Last/Family name')),
                ('age', models.PositiveIntegerField(validators=[django.core.validators.MinValueValidator(18), django.core.validators.MaxValueValidator(120)])),
                ('rating', models.FloatField(default=0.0)),
                ('country', models.CharField(choices=[('DE', 'Germany'), ('UK', 'United Kingdom'), ('US', 'United States'), ('PT', 'Portugal'), ('FR', 'France'), ('ES', 'Spain'), ('IT', 'Italy')], default='DE', verbose_name='Country')),
            ],
        ),
        migrations.CreateModel(
            name='AuthorDetail',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('biography', models.TextField(verbose_name='Biography')),
                ('city', models.CharField(blank=True, max_length=50, null=True, verbose_name='City')),
                ('gender', models.CharField(choices=[('M', 'Male'), ('F', 'Femail')], max_length=20, verbose_name='Gender')),
                ('author', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='library.author', verbose_name='Detailed information about Author')),
            ],
        ),
        migrations.CreateModel(
            name='Book',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=100, verbose_name='Book Title')),
                ('publication_date', models.DateField(null=True, verbose_name='Publication Date')),
                ('description', models.TextField(blank=True, null=True, verbose_name='Summary')),
                ('amount_pages', models.PositiveIntegerField(blank=True, null=True, validators=[django.core.validators.MaxValueValidator(10000)], verbose_name='Amount of Pages')),
                ('created_at', models.DateTimeField(blank=True, null=True, verbose_name='Created at')),
                ('price', models.PositiveIntegerField(blank=True, null=True, verbose_name='Price')),
                ('is_banned', models.BooleanField(default=False, verbose_name='Is Banned')),
                ('is_deleted', models.BooleanField(default=False)),
                ('author', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to='library.author', verbose_name='Author')),
                ('owner', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='books', to=settings.AUTH_USER_MODEL, verbose_name='Owner')),
                ('category', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='books', to='library.category', verbose_name='Category')),
                ('genres', models.ManyToManyField(related_name='books', to='library.genre')),
                ('libraries', models.ManyToManyField(related_name='books', to='library.library', verbose_name='Library')),
                ('publisher', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='library.publisher', verbose_name='Publisher')),
            ],
            managers=[
                ('all_objects', django.db.models.manager.Manager()),
            ],
        ),
        migrations.CreateModel(
            name='Event',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255, verbose_name='Event name')),
                ('description', models.TextField(verbose_name='Event description')),
                ('timestamp', models.DateTimeField(verbose_name='Event Date and Time')),
                ('book', models.ManyToManyField(related_name='events', to='library.book', verbose_name='Books')),
                ('library', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='library.library', verbose_name='Library')),
            ],
        ),
        migrations.CreateModel(
            name='Member',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('first_name', models.CharField(max_length=50, verbose_name='First name')),
                ('last_name', models.CharField(max_length=50, verbose_name='Last name')),
                ('emil', models.EmailField(max_length=254, unique=True, verbose_name='Email')),
                ('gender', models.CharField(choices=[('M', 'Male'), ('F', 'Femail')], max_length=20, verbose_name='Gender')),
                ('date_of_birth', models.DateField(verbose_name='Date of Birth')),
                ('age', models.PositiveIntegerField(editable=False, verbose_name='Age')),
                ('role', models.CharField(choices=[('A', 'Administrator'), ('R', 'Reader'), ('E', 'Employee')], max_length=30, verbose_name='Role')),
                ('active', models.BooleanField(default=True, verbose_name='Is active')),
                ('libraries', models.ManyToManyField(related_name='members', to='library.library', verbose_name='Library')),
            ],
        ),
        migrations.CreateModel(
            name='EventParticipant',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('register_date', models.DateField(auto_now_add=True, verbose_name="Date of Member's registration on Event")),
                ('event', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='library.event', verbose_name='Event name')),
                ('member', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='library.member', verbose_name='Member of the Event')),
            ],
        ),
        migrations.CreateModel(
            name='Borrow',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('book_take_date', models.DateField(auto_now_add=True, verbose_name='Book take Date')),
                ('book_return_date', models.DateField(verbose_name='Book return Date')),
                ('is_returned', models.BooleanField(default=False, verbose_name='Is returned?')),
                ('book', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='library.book', verbose_name='Borrowed Book')),
                ('library', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='library.library', verbose_name='Library')),
                ('member', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='library.member', verbose_name='Member')),
            ],
        ),
        migrations.CreateModel(
            name='Movie',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=50)),
                ('actors', models.ManyToManyField(related_name='movies', to='library.actor')),
                ('director', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='movies', to='library.director')),
            ],
        ),
        migrations.CreateModel(
            name='Post',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(verbose_name='Created at')),
                ('title', models.CharField(max_length=255, unique_for_date='created_at', verbose_name='Titel of the Email')),
                ('text', models.TextField(verbose_name='Text')),
                ('moderated', models.BooleanField(default=False, verbose_name='Moderated?')),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('author', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='library.member', verbose_name='Author of the Email')),
                ('library', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='library.library', verbose_name='Title of the Library in Email')),
            ],
        ),
        migrations.CreateModel(
            name='Review',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('review', models.TextField(verbose_name='Review of the book')),
                ('rating', models.FloatField(validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(5)], verbose_name='Rating of the Book')),
                ('books', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='reviews', to='library.book', verbose_name='Reviewed Book')),
                ('reviewer', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='library.member', verbose_name='Reviewer')),
            ],
        ),
        migrations.CreateModel(
            name='UserInfo',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('married', models.BooleanField(verbose_name='Married?')),
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to='library.user', verbose_name='Additional User Info')),
            ],
        ),
    ]
